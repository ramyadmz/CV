{"version":3,"sources":["components/FullPage.js","sections/FirstPage.js","App.js","serviceWorker.js","index.js"],"names":["FullPage","children","this","props","className","Component","FirstPage","state","theme","changeTheme","bind","setState","href","onClick","src","alt","data","items","title","subtitle","Object","keys","links","map","key","icon","url","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"01CAaeA,G,6KAVF,IACEC,EAAYC,KAAKC,MAAjBF,SACP,OACI,yBAAKG,UAAS,mBAAeF,KAAKC,MAAMC,WAAa,GAAvC,MACTH,O,GALMI,c,qBCiFRC,G,8DA1Eb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAK,UAEP,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALP,E,0DAQZR,KAAKS,SAAS,CAEZH,MAAQ,aAAAN,KAAKK,MAAMC,MAAX,SAA6CN,KAAKK,MAAMC,MAAX,Q,+BAe/C,IAAD,OACP,OACE,kBAAC,EAAD,CAAUJ,UAAWF,KAAKK,MAAMC,OAC9B,yBAAKJ,UAAU,OACb,yBAAKA,UAAU,WACb,4BACE,4BACE,uBAAGQ,KAAK,YAAR,UAEF,4BACE,uBAAGA,KAAK,eAAR,eAEF,4BACE,uBAAGA,KAAK,aAAR,aAIN,yBAAKR,UAAU,YACb,yBACES,QAAS,WACP,EAAKJ,eAEPL,UAAU,YACVU,IAAI,mBACJC,IAAI,mBAIV,wBAAIX,UAAU,oBAAoBY,EAAKV,UAAUW,MAAMC,OACvD,6BACE,wBAAId,UAAU,oBAAoBY,EAAKV,UAAUW,MAAME,WAEzD,yBAAKf,UAAU,iBACZgB,OAAOC,KAAKL,EAAKV,UAAUW,MAAMK,OAAOC,KAAI,SAACC,GAC5C,OACE,yBAAKpB,UAAU,QACb,kBAAC,wBAAD,CACEqB,KAAMD,EACNE,IAAKV,EAAKV,UAAUW,MAAMK,MAAME,e,GAhE1BnB,cCKTsB,MARf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.28136073.chunk.js","sourcesContent":["import React ,{Component} from 'react' ;\r\nimport './FullPage.css'\r\nclass FullPage extends Component {\r\n    render(){\r\n        const {children} = this.props\r\n        return(\r\n            <div className={ `fullpage ${this.props.className || ''} `}>\r\n                {children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FullPage ","import React, { Component } from \"react\";\r\nimport FullPage from \"../components/FullPage\";\r\n//import NavigationBar from \"../components/NavigationBar\";\r\nimport data from \"../data.json\";\r\nimport { SocialMediaIconsReact } from \"social-media-icons-react\";\r\nimport \"./FirstPage.css\";\r\nimport \"../components/NavigationBar.css\";\r\n\r\nclass FirstPage extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      theme : `themeI`\r\n    }\r\n    this.changeTheme = this.changeTheme.bind(this)\r\n  }\r\n  changeTheme() {\r\n    this.setState({\r\n\r\n      theme : this.state.theme === `themeIII` ? `themeI` : this.state.theme + `I`\r\n\r\n    })\r\n//    let next\r\n//    switch(this.state.theme) {    \r\n//        case \"theme1\" : next = \"theme2\"\r\n//        case \"theme2\" : next = \"theme3\"\r\n//        case \"theme3\" : next = \"theme1\"\r\n//      case \"theme1\" :  return () => { this.setState({ theme : \"theme2\"  }) ;}\r\n//      case \"theme2\" :  return () => {this.setState({ theme : \"theme3\"  }) ;}\r\n//      case \"theme3\" :  return () => {this.setState({ theme : \"theme1\"  }) ;}\r\n    \r\n //   this.setState({ theme : next })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <FullPage className={this.state.theme}>\r\n        <div className=\"nav\">\r\n          <div className=\"navlist\">\r\n            <ul>\r\n              <li>\r\n                <a href=\"news.asp\">About</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"contact.asp\">Experience</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"about.asp\">Skills</a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"themebox\">\r\n            <img\r\n              onClick={() => {\r\n                this.changeTheme();\r\n              }}\r\n              className=\"themeicon\"\r\n              src=\"/icons/theme.png\"\r\n              alt=\"change theme\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <h1 className=\"palete2 headings\">{data.FirstPage.items.title}</h1>\r\n        <div>\r\n          <h3 className=\"palete3 headings\">{data.FirstPage.items.subtitle}</h3>\r\n        </div>\r\n        <div className=\"icons-wrapper\">\r\n          {Object.keys(data.FirstPage.items.links).map((key) => {\r\n            return (\r\n              <div className=\"icon\">\r\n                <SocialMediaIconsReact\r\n                  icon={key}\r\n                  url={data.FirstPage.items.links[key]}\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </FullPage>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FirstPage;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport FullPage from \"./components/FullPage\";\nimport FirstPage from \"./sections/FirstPage\";\n\nfunction App() {\n  return (\n    <FullPage>\n      <FirstPage/>\n    </FullPage>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}