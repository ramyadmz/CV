{"version":3,"sources":["components/FullPage.js","sections/FirstPage.js","sections/About.js","components/NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["FullPage","children","this","props","className","Component","FirstPage","data","items","title","subtitle","Object","keys","links","map","key","icon","url","About","AboutPage","text","NavigationBar","href","onClick","changeTheme","src","icons","general","theme","alt","App","state","bind","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8xDAaeA,G,6KAVF,IACEC,EAAYC,KAAKC,MAAjBF,SACP,OACI,yBAAKG,UAAS,mBAAeF,KAAKC,MAAMC,WAAa,GAAvC,MACTH,O,GALMI,c,6BCgCRC,E,uKAvBX,OACE,kBAAC,EAAD,KACE,wBAAIF,UAAU,oBAAoBG,EAAKD,UAAUE,MAAMC,OACvD,6BACE,wBAAIL,UAAU,oBAAoBG,EAAKD,UAAUE,MAAME,WAEzD,yBAAKN,UAAU,iBACZO,OAAOC,KAAKL,EAAKD,UAAUE,MAAMK,OAAOC,KAAI,SAACC,GAC5C,OACE,yBAAKX,UAAU,QACb,kBAAC,wBAAD,CACEY,KAAMD,EACNE,IAAKV,EAAKD,UAAUE,MAAMK,MAAME,e,GAd1BV,aCWTa,G,6KAXX,OACE,kBAAC,EAAD,KACE,wBAAId,UAAU,WAAWG,EAAKY,UAAUX,MAAMC,OAC9C,6BACE,uBAAGL,UAAU,WAAWG,EAAKY,UAAUX,MAAMY,Y,GANnCf,cC2BLgB,G,4KA7BH,IAAD,OACP,OACE,yBAAKjB,UAAU,OAEb,yBAAKA,UAAU,WACb,4BACE,4BACE,uBAAGkB,KAAK,YAAR,UAEF,4BACE,uBAAGA,KAAK,eAAR,eAEF,4BACE,uBAAGA,KAAK,aAAR,aAIN,yBAAKlB,UAAU,YAEX,yBAAKmB,QAAS,WACV,EAAKpB,MAAMqB,eACZpB,UAAU,YAAYqB,IAAKlB,EAAKmB,MAAMC,QAAQC,MAAOC,IAAI,uB,GAvB5CxB,cCiCbyB,G,wDA1Bb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXH,MAAM,UAER,EAAKJ,YAAc,EAAKA,YAAYQ,KAAjB,gBALP,E,0DAQZ9B,KAAK+B,SAAS,CACZL,MACE,aAAA1B,KAAK6B,MAAMH,MAAX,SAA6C1B,KAAK6B,MAAMH,MAAX,Q,+BAIjD,OACE,yBAAKxB,UAAWF,KAAK6B,MAAMH,OACzB,kBAAC,EAAD,CACEJ,YAAatB,KAAKsB,YAAYQ,KAAK9B,QAErC,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GArBUG,cCGE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.29199b07.chunk.js","sourcesContent":["import React ,{Component} from 'react' ;\r\nimport './FullPage.css'\r\nclass FullPage extends Component {\r\n    render(){\r\n        const {children} = this.props\r\n        return(\r\n            <div className={ `fullpage ${this.props.className || ''} `}>\r\n                {children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FullPage ","import React, { Component } from \"react\";\r\nimport FullPage from \"../components/FullPage\";\r\nimport { SocialMediaIconsReact } from \"social-media-icons-react\";\r\n\r\nimport \"./FirstPage.css\";\r\nimport \"./theme.css\";\r\n\r\nimport data from \"../data.json\";\r\n\r\nclass FirstPage extends Component {\r\n  render() {\r\n    return (\r\n      <FullPage>\r\n        <h1 className=\"palete2 headings\">{data.FirstPage.items.title}</h1>\r\n        <div>\r\n          <h3 className=\"palete3 headings\">{data.FirstPage.items.subtitle}</h3>\r\n        </div>\r\n        <div className=\"icons-wrapper\">\r\n          {Object.keys(data.FirstPage.items.links).map((key) => {\r\n            return (\r\n              <div className=\"icon\">\r\n                <SocialMediaIconsReact\r\n                  icon={key}\r\n                  url={data.FirstPage.items.links[key]}\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </FullPage>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FirstPage;\r\n","import React, { Component } from \"react\";\r\nimport FullPage from \"../components/FullPage\";\r\n\r\nimport \"./About.css\";\r\n\r\nimport data from \"../data.json\";\r\n\r\nclass About extends Component {\r\n  render() {\r\n    return (\r\n      <FullPage>\r\n        <h1 className=\"palete2\">{data.AboutPage.items.title}</h1>\r\n        <div>\r\n          <p className=\"palete3\">{data.AboutPage.items.text}</p>\r\n        </div>\r\n      </FullPage>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from \"react\";\r\nimport \"./NavigationBar.css\";\r\nimport data from \"../data.json\";\r\nclass NavigationBar extends Component {\r\n    \r\n  render() {\r\n    return (\r\n      <div className=\"nav\">\r\n        \r\n        <div className='navlist'> \r\n          <ul>\r\n            <li>\r\n              <a href=\"news.asp\">About</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"contact.asp\">Experience</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"about.asp\">Skills</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className='themebox'>\r\n\r\n            <img onClick={()=>{\r\n                this.props.changeTheme()\r\n            }} className='themeicon' src={data.icons.general.theme} alt=\"change theme\" />\r\n         \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavigationBar;\r\n","import React, { Component } from \"react\";\nimport FirstPage from \"./sections/FirstPage\";\nimport About from \"./sections/About\";\n\nimport NavigationBar from \"./components/NavigationBar\";\n\nimport \"./App.css\";\nimport \"./components/NavigationBar.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      theme: `themeI`,\n    };\n    this.changeTheme = this.changeTheme.bind(this);\n  }\n  changeTheme() {\n    this.setState({\n      theme:\n        this.state.theme === `themeIII` ? `themeI` : this.state.theme + `I`,\n    });\n  }\n  render() {\n    return (\n      <div className={this.state.theme}>\n        <NavigationBar\n          changeTheme={this.changeTheme.bind(this)}\n        ></NavigationBar>\n        <FirstPage />\n        <About />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}